var topicData = [{"id":"annotating text:0","section":0,"topic":"annotating text","heading":"annotating text","body":"Q. how can you make annotations on specific lines of a file?\n\n-   option: heading references in comments\n\n    -   pro: encourages meaninginful headings and structure of requirements docs\n    -   depends on unique headings, which is not too tricky.\n\n-   option: heading reference in commit\n\n    -   pro: similar to idea of \"fixes: #33\" in github\n\n-   option: copy/paste an identifiable chunk into code\n    -   con: might have some unusual edge cases\n","filename":"annotating-text.md"},{"id":"css-modules:0","section":0,"topic":"css-modules","heading":"css-modules","body":"Notes about [css-modules](https://github.com/css-modules)\n","filename":"css-modules.md"},{"id":"css-modules:1","section":1,"topic":"css-modules","heading":"todo","body":"-   [ ] try [factor-bundle](https://github.com/substack/factor-bundle) with css modules\n\n-   [ ] look at how [parcelify](https://github.com/rotundasoftware/parcelify) handles rebuilds of changes to node_modules\n\n-   [ ] do we get any useful info about css modules from [disc](http://hughsk.io/disc/) ?\n\n-   [ ] source maps\n\n-   [ ] see if there's anything useful here: <https://github.com/ForbesLindesay/acorn-compile/blob/master/test/index.js>\n","filename":"css-modules.md"},{"id":"css-modules:2","section":2,"topic":"css-modules","heading":"test suite","body":"Goals:\n\n-   develop a suite of end-to-end tests that cover all css-modules functionality\n-   run the same test cases in different implementations (eg. webpack / browserify)\n-   provide a simple \"how to\" reference for different things you can do with css-modules\n","filename":"css-modules.md"},{"id":"css-modules:3","section":3,"topic":"css-modules","heading":"questions","body":"-   Q. why does editing a shared css file rebuild correctly, but editing the main one include _everything_ in the bundle?\n\n-   Q. how does it go with a .css.js module?\n\n-   Q. would icss be better as a js module that exports objects?\n","filename":"css-modules.md"},{"id":"css:0","section":0,"topic":"css","heading":"css","body":"Q. Do you start with html, and then \"hang\" css on it? Or do you write html with a certain bunch of css in mind?\n\nSeems apparent that writing html first is the right way to go - css on its own doesn't mean anything.\n\nBut then how do css libraries fit in?\n","filename":"css.md"},{"id":"discipline:0","section":0,"topic":"discipline","heading":"discipline","body":"-   there is \"skill\" and then there is \"discipline\"\n-   as with any habit-forming, consistency is greater than quantity. Everyone can start with _something_ and build upon that.\n-   just like in physical training there are things we can do to help people form that discipline. A clear guideline that's easy to follow, and someone who will check up on you, that you are accountable to.\n-   these 2 things (clear guideline & accountability) will also help us to avoid \"the slump\". As a project matures or deadlines encroach, disciplines can slip. Or a dev might spend 8 hours debugging something, which only equates to 1 line of code. Somebody needs to be there alongside them pushing through the tough patch. But the end result is growth.\n","filename":"developer-discipline.md"},{"id":"Developer experience:0","section":0,"topic":"Developer experience","heading":"Developer experience","body":"Q. What kinds of things can make development easier to grasp, and get closer to the heart of it without getting bogged in the fringes?\n","filename":"developer-experience.md"},{"id":"Developer experience:1","section":1,"topic":"Developer experience","heading":"tools","body":"-   idea: personal dashboard for a project, where you can do things like continuously run `npm run lint` and tests\n","filename":"developer-experience.md"},{"id":"Headless Backend:0","section":0,"topic":"Headless Backend","heading":"Headless Backend","body":"idea: headless backend\n\n-   create the data models and business logic etc, and then step through all functionality\n-   at each step it asks you questions:\n    -   _\"has the user exceeded their quota?\"_\n    -   _\"was there a payment error?\"_\n-   and the response can also contain new URLs to complete various follow-up actions\n\n-   the goal is that we present a graph of possible next-steps and outcomes\n","filename":"headless-backend.md"},{"id":"ideas:0","section":0,"topic":"ideas","heading":"ideas","body":"A bunch of ideas I'd like to work on.\n\n-   css modules test suite\n-   css modules crash course\n-   [screen tracker][]\n-   huxley bot\n-   solving the problem of [variations on a structure][]\n-   find a good way (better than slack) to Q and A with a team\n-   ways to capture [requirements][]\n    -   ways to annotate screenshots: [requirements/Annotate screenshots][]\n","filename":"ideas.md"},{"id":"js:0","section":0,"topic":"js","heading":"js","body":"\n","filename":"js.md"},{"id":"music toy:0","section":0,"topic":"music toy","heading":"music toy","body":"-   traditional electronic music, as an instrument, is heavily loop-based. You have a loop and you can do stuff to it.\n-   what if we made something that was still \"pattern-based\" but let you play it more like an instrument?\n\n-   web audio\n-   define a pattern, which can be transposed to different chords / intervals\n-   use 3 keyboard keys: prev / curr / next\n-   keys play a note, advancing in the pattern as you use `next`\n-   other keys transpose the pattern, so you can effectively play the same role as rythym guitar\n","filename":"music-toy.md"},{"id":"Projects in Github:0","section":0,"topic":"Projects in Github","heading":"Projects in Github","body":"-   need all requirements clearly defined\n-   all github issues (whether features or bugs) must link to the relevant section in the docs\n-   regularly rewrite issues to keep them clean and useful\n","filename":"projects-in-github.md"},{"id":"react-visibility-sensor:0","section":0,"topic":"react-visibility-sensor","heading":"react-visibility-sensor","body":"-   [ ] discuss the timer / dom event discussion\n-   [ ] \\#26\n","filename":"react-visibility-sensor.md"},{"id":"Requirements:0","section":0,"topic":"Requirements","heading":"Requirements","body":"\n","filename":"requirements.md"},{"id":"Requirements:1","section":1,"topic":"Requirements","heading":"Record the facts","body":"-   one way to gather requirements is to make a list of \"facts\" about how the system works.\n-   these might also have accompanying notes to clarify edge cases\n-   then whenever developing a feature, writing a QA script, or reporting a bug, try to refer to as many of these facts as possible\n-   need a good way to search for them\n-   should make it really easy to add new facts, even if there is some overlap\n-   too confusing to try and describe the entire system in prose, but this way of describing the system is like pointalism: as we add more and more of these points, the whole picture begins to emerge\n-   still useful to categorise things into sections / screens\n","filename":"requirements.md"},{"id":"Requirements:2","section":2,"topic":"Requirements","heading":"Annotate screenshots","body":"-   rather than having to manually name each thing when you describe it, we need to be able to say \"this thing\" and point to an area in an image file.\n","filename":"requirements.md"},{"id":"Screen tracker:0","section":0,"topic":"Screen tracker","heading":"Screen tracker","body":"Idea: make an electron app that takes regular snapshots of my desktop, so that I can annotate for retrospective time-tracking and maximizing delegation.\n","filename":"screen-tracker.md"},{"id":"Slack:0","section":0,"topic":"Slack","heading":"Slack","body":"Slack tips\n","filename":"slack.md"},{"id":"Slack:1","section":1,"topic":"Slack","heading":"subheading","body":"\n","filename":"slack.md"},{"id":"testing:0","section":0,"topic":"testing","heading":"testing","body":"\n","filename":"testing.md"},{"id":"Time limit on tasks:0","section":0,"topic":"Time limit on tasks","heading":"Time limit on tasks","body":"idea: when starting a task, set a time limit (and use an actual timer).\n\n-   Remove as many distractions as possible during that time\n-   when the time is up, you're not allowed to keep going or start the clock again. Must change to some other task.\n-   the purpose of this constraint is to condition myself to work deliberately, thinking about the cost before going into it. If something turns out to take longer than I expected, it shifts the emphasis from _\"just keep going until it's done\"_ to _\"spend the remaining time organising things better, so that when I next come to this task I'll be able to approach it more predictably\"_.\n\n-   30 minutes is a good starting place for new tasks that I'm not sure about. That's enough time to either complete a short task, or prepare myself for a longer one.\n\n-   it's ok to go past the timer if you're just doing final stages of wrapup, sending email, etc. But shouldn't go beyond a couple of minutes, and shouldn't introduce anything new.\n","filename":"time-limit-on-tasks.md"},{"id":"Variations on a structure:0","section":0,"topic":"Variations on a structure","heading":"Variations on a structure","body":"There is a common problem in javascript where you have to convert a data structure from one form to another. However it's complicated as you often run out of names.\n\neg. `var foo = { a: [1,2,3] }` is known as a \"foo\" object. And we have a function that expects a \"foo\" object.\n\nBut what if we, for some reason have something that is _almost_ a foo object: `var foo = { a: '1,2,3' }`. \nWe could just convert inline like `foo.a = foo.a.split(',')`. But if this is a common conversion we will have a lot of duplicated logic and will quickly lead to confusion. \n\nTo me this is a naming problem. If we had a system of saying this is a `foo`, `foo_1`, or `foo_N` we could define more descriptively what those variations entail. And provide functions to convert from `foo_1 -> foo`.\n\nThen it becomes possible to make a rule where structures are only ever converted from one form to another via a function.  And to put in checks to say \"i expect this object to be of this particular form\"\n\nFirst step is to define the \"natural\" structure. So in js that means date objects for dates, arrays for lists and ints / floats for number values.\n\nNow say we fetch an object over a json api. Most things should be in their natural structure, except for date objects. So the api gives us a `foo1` and we have to convert that to `foo`.\n\nNow we want to populate an edit-form with the object. Date objects are still fine, but arrays need to be serialized to comma-separated strings. And maybe some nested objects need to be flatten. So this will be `foo -> foo2`.\n\nWhen the form is submitted we just need a function `foo2 -> foo` and then we can also have a `foo -> foo1` to send back to the api.\n","filename":"variations-on-a-structure.md"},{"id":"webm:0","section":0,"topic":"webm","heading":"webm","body":"-   it seems that chrome will show a blank video if a webm has a height that is not divisible by 2?\n-   [ ] todo find out\n","filename":"webm.md"}]
